"use strict";(self.webpackChunk_pdfme_website=self.webpackChunk_pdfme_website||[]).push([[1477],{30010:e=>{e.exports=JSON.parse('{"blogPosts":[{"id":"implementation-Ideas-for-dynamic-tables","metadata":{"permalink":"/blog/implementation-Ideas-for-dynamic-tables","source":"@site/blog/2024-01-02-implementation-Ideas-for-dynamic-tables.md","title":"Implementation Ideas for Dynamic Tables in pdfme","description":"Explore the innovative solutions for implementing dynamic tables in pdfme, a comprehensive guide discussing challenges, strategies, and ideas for advanced PDF table rendering, including page breaks, table styling, and layout calculations.","date":"2024-01-02T00:00:00.000Z","formattedDate":"January 2, 2024","tags":[],"readingTime":5.44,"hasTruncateMarker":true,"authors":[{"name":"Kyohei Fukuda (@hand-dot)","title":"Author of pdfme","url":"https://github.com/hand-dot","image_url":"https://avatars.githubusercontent.com/u/24843808?v=4","imageURL":"https://avatars.githubusercontent.com/u/24843808?v=4"}],"frontMatter":{"title":"Implementation Ideas for Dynamic Tables in pdfme","description":"Explore the innovative solutions for implementing dynamic tables in pdfme, a comprehensive guide discussing challenges, strategies, and ideas for advanced PDF table rendering, including page breaks, table styling, and layout calculations.","slug":"implementation-Ideas-for-dynamic-tables","authors":[{"name":"Kyohei Fukuda (@hand-dot)","title":"Author of pdfme","url":"https://github.com/hand-dot","image_url":"https://avatars.githubusercontent.com/u/24843808?v=4","imageURL":"https://avatars.githubusercontent.com/u/24843808?v=4"}],"tags":[]},"unlisted":false,"nextItem":{"title":"Why Develop a PDF Library Now?","permalink":"/blog/why-develop-pdf-library-now"}},"content":"## Why Dynamic Tables Couldn\'t Be Implemented in pdfme\\n\\nUntil now, pdfme has been realizing simple [variable data printing](https://en.wikipedia.org/wiki/Variable_data_printing) by embedding PDF data into a property called `basePdf` in the template and overlaying a `schema` on top of this PDF.\\n\\n![Image of the pdfme process](https://storage.googleapis.com/zenn-user-upload/b7b9c0b7611e-20240102.png)\\n\\nThis method is incredibly simple and allows for the easy creation of customized PDFs.\\n\\n\x3c!-- truncate --\x3e\\n\\nHowever, there is a significant need that cannot be ignored for certain use cases in PDF creation.  \\nThat need is table rendering. More specifically, many users want to address cases where the number of rows, like in the red-framed section of the image below, increases, such as in invoices.\\n\\n<img src=\\"https://storage.googleapis.com/zenn-user-upload/53a9a0a584fc-20240102.png\\" width=\\"500px\\" />\\n\\nThe method of overlaying a schema on the basePdf, as explained above, doesn\'t allow for an efficient implementation of page breaks.\\n\\nTherefore, the current version of pdfme cannot support tables where rows dynamically increase.\\n\\nI understand this need but was struggling with how exactly to implement it.  \\nThis has been the main blocker in implementing Tables.\\n\\n## How to Implement Page Breaks\\n\\nI\'ve been [discussing](https://github.com/pdfme/pdfme/discussions/148) this with users for quite some time, and finally, there seems to be a way to implement page breaks. Two key elements have come together:\\n\\n- ReadOnly Schemas added in [V3.2.0](https://github.com/pdfme/pdfme/releases/tag/3.2.0)\\n    - Line, Rectangle, Ellipse, SVG, Text, Image\\n- A new way to specify basePdf and padding implemented for [V4](https://github.com/pdfme/pdfme/pull/394), called [BlankPDF](https://github.com/pdfme/pdfme/blob/c4dfa7023a42d9ab207784a6557f902c078bdcd6/packages/common/src/schema.ts#L87)\\n\\nWith ReadOnly Schemas, it\'s possible to design the static parts of a template within pdfme without loading a PDF designed in basePdf. This allows for the addition of the height of schemas added to the page, adjusting the y-coordinate of all schemas below it by the increased height. Padding also allows control over where to resume rendering after a page break.\\n\\nThe following figure shows an example where 19 rows of table data are provided, causing a page break, and the \'note\' schema being pushed down.\\n\\n![Example of table with page break](/img/dynamictable.png)\\n\\nThe logic I had in mind was:\\n\\n- Render the table one row at a time, from Header to Row19.\\n- As the height increases and spills over the first page at Row 12, a page break occurs, creating a second page.\\n- After rendering up to Row19, the generator function returns the final height of the table, which is retained in a variable like yAdjust (190mm in the figure above).\\n- For all schemas below the increased height schema (in this example, \'note\'), add the increased height (190mm) to their y-coordinate. The rendering starts on the second page at a y-coordinate of 140mm.\\n\\nThe issue is that it doesn\'t accommodate fixed layouts like headers or footers. In that case, instead of specifying the size of [BlankPDF](https://github.com/pdfme/pdfme/blob/c4dfa7023a42d9ab207784a6557f902c078bdcd6/packages/common/src/schema.ts#L87)\'s width and height, specify a PDF containing the fixed design of the header or footer. This is planned for further modification.\\n\\n## How to Tackle the Complexity of Table Settings and Rendering\\n\\nTable settings and rendering can get complex. How should we approach it?  \\nI want to leverage the simplicity of pdfme, which allows for easy PDF creation, to implement the table functionality.\\n\\nFor example, consider how to set up the following table.\\n\\n![Example of a complex table](https://storage.googleapis.com/zenn-user-upload/5607ddfc06c7-20240102.png)\\n\\nA table is essentially composed of headers (th) and table data (td).  \\nTable data may be rendered in something other than text. In this example, `Name` and `Category` columns are rendered with a Text renderer, while `Image` column is rendered with an Image renderer.\\n\\n**Fortunately, pdfme already implements various renderers like Text, Image, SVG, Barcodes, etc. Therefore, there\'s no need to create new rendering processes for each cell; once the size and position of a cell are determined, existing PDF rendering processes can be used.**\\n\\nThis leverages the plugin architecture of pdfme\'s rendering processes, potentially simplifying complex tasks.\\n\\nThis idea came from an [interesting comment](https://github.com/pdfme/pdfme/issues/332#issuecomment-1872032370) left by [MP70](https://github.com/MP70) on the dynamic table issue.  \\nConsidering the above, I believe the table should do the following three things:\\n\\n### 1. Table Styling\\n\\nThe following image shows a QR code setting panel, but similar style settings should be possible for tables as well.\\n\\n<img src=\\"https://storage.googleapis.com/zenn-user-upload/9444827add81-20240102.png\\" width=\\"500px\\" />\\n\\n\\n- Border\\n    - color, width\\n- Cell Padding (content margin)\\n    - horizontal, vertical\\n- Cell Background Color\\n    - Plan to implement a stripe design, alternating odd and even rows\\n- Header Visibility\\n\\n### 2. Setting Headers and Columns\\n\\nAdd columns to the header and set how they will be rendered.\\n\\n<img src=\\"https://storage.googleapis.com/zenn-user-upload/560ebea7ca2e-20240102.png\\" width=\\"500px\\" />\\n\\n\\n- Each column is rendered with `ReadOnlyText`\\n    - Options available in the existing Text renderer like text color and background color can be used\\n- Specify Type to set up rendering of table data\\n    - Use renderers available in pdfme like Image, Barcodes, etc., as types\\n- Clicking the gear icon in the image above opens a modal to set the Column and Type\\n\\n### 3. Calculating Table Layout\\n\\nOnce the style and column rendering settings are determined, calculate the layout and render the cells.\\n\\n- Calculating and rendering cell positions\\n    - Generally, render at the same x-coordinate as each column, but use the y-coordinate and height of the row above for the y-coordinate. Once the position is set, render the cell using the column settings.\\n- Calculating the height of Rows and Cells\\n    - As explained in the page break section, the increased height needs to be communicated to the generator function.\\n    - As a current issue, the Text renderer, if not using the Dynamic Font Size feature, might render beyond the set height, as shown in the image below.\\n        ![Text rendering spilling over set height](https://storage.googleapis.com/zenn-user-upload/2f880c86b4fd-20240102.png)\\n    - Ideally, the row height should be expanded, as shown in the image below. To achieve this, the Text renderer needs to return the rendered height after rendering.\\n        <img src=\\"https://storage.googleapis.com/zenn-user-upload/3b7065ee2f39-20240102.png\\" width=\\"500px\\" />\\n    - The height of each cell\'s rendering result determines the height of each Row, and the total height of all Rows determines the height of the table.\\n\\n## I Would Appreciate Feedback\\n\\nThe implementation of the table hasn\'t started yet. Right now, it\'s just the ideas written in this document.  \\nI believe there are many oversights and issues with these ideas.\\n\\nBeing an OSS, I hope it gets seen by many and receives feedback and collaboration. If there seem to be any issues, please let me know.  \\nThe dynamic table issue is here. Feel free to comment.  \\n[https://github.com/pdfme/pdfme/issues/332](https://github.com/pdfme/pdfme/issues/332)\\n\\nAnd thank you for reading until the end.  \\nIf you want to support this project, the easiest way to contribute is to share this article.  \\nI look forward to your continued support for pdfme."},{"id":"why-develop-pdf-library-now","metadata":{"permalink":"/blog/why-develop-pdf-library-now","source":"@site/blog/2023-12-13-why-develop-pdf-library-now.md","title":"Why Develop a PDF Library Now?","description":"Exploring the creation of \'pdfme,\' a revolutionary TypeScript-based PDF library. Discover the motivations and innovations behind this modern PDF solution.","date":"2023-12-13T00:00:00.000Z","formattedDate":"December 13, 2023","tags":[],"readingTime":3.775,"hasTruncateMarker":true,"authors":[{"name":"Kyohei Fukuda (@hand-dot)","title":"Author of pdfme","url":"https://github.com/hand-dot","image_url":"https://avatars.githubusercontent.com/u/24843808?v=4","imageURL":"https://avatars.githubusercontent.com/u/24843808?v=4"}],"frontMatter":{"title":"Why Develop a PDF Library Now?","description":"Exploring the creation of \'pdfme,\' a revolutionary TypeScript-based PDF library. Discover the motivations and innovations behind this modern PDF solution.","slug":"why-develop-pdf-library-now","authors":[{"name":"Kyohei Fukuda (@hand-dot)","title":"Author of pdfme","url":"https://github.com/hand-dot","image_url":"https://avatars.githubusercontent.com/u/24843808?v=4","imageURL":"https://avatars.githubusercontent.com/u/24843808?v=4"}],"tags":[]},"unlisted":false,"prevItem":{"title":"Implementation Ideas for Dynamic Tables in pdfme","permalink":"/blog/implementation-Ideas-for-dynamic-tables"}},"content":"## What is pdfme?\\n\\n![pdfme](https://storage.googleapis.com/zenn-user-upload/e8b30b9c5923-20231206.png)\\n\\nAn open-source, free PDF creation library written in TypeScript. It allows for declarative PDF creation using templates and works both on servers and browsers.\\n\\nSince its beta release in February 2022, it has reached Version 3 by November 2023. On [GitHub](https://github.com/pdfme/pdfme), it has garnered 1500 stars, and on [npm](https://www.npmjs.com/package/@pdfme/generator), it sees about 10,000 downloads weekly, though there\'s some variation.\\n\\nIt\'s already integrated into various services worldwide, including electronic medical record creation, factory procedure manual production, and e-commerce custom packaging.\\n\\nThis article aims to explain the motivation behind developing pdfme.\\n\\n\x3c!-- truncate --\x3e\\n\\n## Why Develop a **PDF Library**?\\n\\nSince 2014, [pdfkit](https://github.com/foliojs/pdfkit), a fantastic library for creating and editing PDF files, has been available. Another library, [pdf-lib](https://github.com/Hopding/pdf-lib), written in TypeScript and offering additional functionalities over pdfkit\'s PDF creation capabilities, emerged in 2018.\\n\\nBoth are open-source, free, and available under the MIT License.\\nSo, why develop pdfme despite these excellent libraries?\\n\\nIt started as a simple function with no significant motivation, but it evolved into a passion to \\"**eliminate the tedious task of PDF creation from the world!**\\" This drive emerged through the following three steps:\\n\\n### 1. Created a Function to Return PDFs from JSON Input, 2020~\\n\\n- pdfkit and pdf-lib are great but require imperative coding and struggle with scaling template numbers.\\n- For a personal development project, I created a function to return PDFs from JSON input, which led to the precursor of pdfme, [labelmake](https://github.com/hand-dot/labelmake).\\n- It seemed convenient, so I published it on npm.\\n\\n### 2. Added WYSIWYG for Ease of Use as a Colleague Struggled with PDF Creation, 2022~\\n\\n- A colleague was struggling with creating something like a notice of work conditions using [Jaspersoft](https://www.jaspersoft.com/), which seemed overly complex.\\n- Existing solutions were either too complicated for our needs or required expensive licenses.\\n- Added an easy-to-use WYSIWYG, similar to PowerPoint, and rebranded labelmake to pdfme, releasing it as a beta version.\\n\\n    ![](https://storage.googleapis.com/zenn-user-upload/6e1076e7ddf5-20231206.png)\\n    \\n\\n### 3. A Desire to Overhaul Commercial Software with OSS, \ud83d\udca5Currently Here\ud83d\udca5\\n\\n- Recognized the inherent problems in PDF creation. Why does it have to be so cumbersome?\\n- Contemplated why PDF creation remains a tedious task without modern solutions.\\n- Aimed to contribute to the community at the next level, similar to how pdfkit and pdf-lib did.\\n\\n## What Kind of PDF Library Are We Developing?\\n\\n### Implementing Sufficiently Necessary Features\\n\\nFocusing on simplicity while providing sufficiently necessary features.\\nIn Version 3, we released plugins and custom themes/labels, emphasizing \\"customizability.\\"\\n\\nBeing Japanese, I ensured our product could easily handle [custom CJK fonts](https://pdfme.com/docs/custom-fonts), unlike others focused only on Latin characters. Interestingly, China is where we get the most website traffic.\\n\\nHowever, we\'re not yet sufficiently equipped for common use cases like dynamically changing table heights. We plan to support relative coordinate layouts and dynamic tables in [Version 4](https://github.com/orgs/pdfme/projects/8/views/1).\\n\\n### Open Source and Community\\n\\nOur current motivation is to contribute to the community at the next level, as pdfkit and pdf-lib have done.\\n\\nI mainly develop the software, but thankfully, 2-3 people contribute daily.\\n\\nBug reports and feature proposals can be made through [GitHub Issues](https://github.com/pdfme/pdfme/issues), and we also have an open [Discord](https://discord.gg/xWPTJbmgNV) channel. Any clear questions in these open forums usually receive a response within a day or two, including from me.\\n\\n### Free to Use\\n\\nCurrently, there\'s no direct monetization from the library.\\nIt can be installed via npm install and used for commercial purposes without worry.\\n\\nHowever, development takes time, so I need to earn a living. I\'m working full-time and plan to continue this as a side project for the next few years.\\n\\nAdditionally, I operate a service in Japan using pdfme, [labelmake.jp](https://labelmake.jp/), and occasionally monetize through technical support inquiries.\\n\\nSupport (including documentation) is where I believe users have the most need, so I plan to\\n\\n establish a more reliable system in the future if necessary.\\n\\n## Conclusion\\n\\n- Creating a future where PDF creation is quick and cost-free.\\n    - We\'re making it so one day we\'ll say, \'Remember how hard it used to be to create PDFs? What was that all about?\'\\n- Believe that even less modern areas can evolve through community contributions.\\n    - Never thought a function I created years ago would now be used worldwide.\\n    - OSS is fascinating and engaging! I hope to write another interesting chapter.\\n\\n### Thank you for your interest in pdfme!\\n\\nIf you support this project, the easiest contribution you can make is to share this article.  \\nI would be delighted if you could introduce pdfme to people who struggle with PDF creation."}]}')}}]);